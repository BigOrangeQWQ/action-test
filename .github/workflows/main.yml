name: CI

on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
  release:
    types: [published]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setVersion.outputs.version }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set version
        id: setVersion
        run: |
          if [[ "${{github.event_name}}" == "release" && "${{github.event.action}}" == "published" ]]; then
            echo "::set-output name=version::prod"
          else
            echo "::set-output name=version::dev"
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Save version to file
        run: echo $VERSION > version.txt
        env:
          VERSION: ${{ needs.test.outputs.version }}
      - name: Upload version file
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: ${{ github.workspace }}/version.txt
      - name: Set git commit id
        if: ${{ github.ref == 'refs/heads/dev' }}
        id: git
        run: echo "::set-output name=commit_id::$(git rev-parse --short HEAD)"
      - name: Check outputs
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: echo ${{ steps.git.outputs.commit_id }}

  deploy_dev:
    name: Deploy Development
    runs-on: ubuntu-latest
    needs: build
    environment: Development
    if: ${{ github.ref == 'refs/heads/dev' }}
    steps:
      - name: Dump event_name
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: echo "$EVENT_NAME"
      - name: Test env
        env:
          TEST_ENV: ${{ secrets.TEST_ENV }}
        run: |
          [ "$TEST_ENV" == "dev" ] && echo "dev" || echo "Not dev"

  deploy_prod:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: deploy_dev
    environment: Production
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    steps:
      - name: Dump event_name
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: echo "$EVENT_NAME"
      - name: Test env
        env:
          TEST_ENV: ${{ secrets.TEST_ENV }}
        run: |
          [ "$TEST_ENV" == "prod" ] && echo "prod" || echo "Not prod"
