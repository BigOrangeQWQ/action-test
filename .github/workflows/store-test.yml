name: "NoneBot Store Test"

on:
  workflow_dispatch:
    inputs:
      offset:
        description: "Offset"
        required: false
        default: "0"
      limit:
        description: "Limit"
        required: false
        default: "1"
      args:
        description: "Args"
        required: false
        default: ""
  repository_dispatch:
    types: [registry_update]

concurrency:
  group: "store-test"
  cancel-in-progress: false

jobs:
  store_test:
    runs-on: ubuntu-latest
    name: NoneBot2 plugin test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: nonebot/noneflow
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Prepare test
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.prefer-active-python true
          poetry install
          mkdir -p plugin_test/store
          curl -sSL https://raw.githubusercontent.com/nonebot/registry/results/results.json -o plugin_test/store/previous_results.json
          curl -sSL https://raw.githubusercontent.com/nonebot/registry/results/plugins.json -o plugin_test/store/previous_plugins.json
          curl -sSL https://raw.githubusercontent.com/he0119/action-test/master/nonebot/adapters.json -o plugin_test/store/adapters.json
          curl -sSL https://raw.githubusercontent.com/he0119/action-test/master/nonebot/bots.json -o plugin_test/store/bots.json
          curl -sSL https://raw.githubusercontent.com/nonebot/nonebot2/master/website/static/drivers.json -o plugin_test/store/drivers.json
          curl -sSL https://raw.githubusercontent.com/he0119/action-test/master/nonebot/plugins.json -o plugin_test/store/plugins.json

      - name: Test plugin
        if: ${{ !contains(fromJSON('["Bot", "Adapter", "Plugin"]'), github.event.client_payload.type) }}
        run: |
          poetry run python -m src.utils.store_test --offset ${{ github.event.inputs.offset || 0 }} --limit ${{ github.event.inputs.limit || 50 }} ${{ github.event.inputs.args }}

      - name: Update registry(Plugin)
        if: github.event.client_payload.type == 'Plugin'
        run: poetry run python -m src.utils.store_test -k '${{ github.event.client_payload.key }}' -f
        env:
          PLUGIN_CONFIG: ${{ github.event.client_payload.config }}
          PLUGIN_DATA: ${{ github.event.client_payload.data }}

      - name: Update registry(Bot, Apdater)
        if: ${{ contains(fromJSON('["Bot", "Adapter"]'), github.event.client_payload.type) }}
        run: poetry run python -m src.utils.store_test -l 0

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: |
            ${{ github.workspace }}/plugin_test/results.json
            ${{ github.workspace }}/plugin_test/adapters.json
            ${{ github.workspace }}/plugin_test/bots.json
            ${{ github.workspace }}/plugin_test/drivers.json
            ${{ github.workspace }}/plugin_test/plugins.json
